{
  "openapi": "3.0.3",
  "info": {
    "title": "Backend Hiring Challenge - OpenAPI 3.0",
    "version": "1.0.0",
    "description": "The Ticket backend server, a microservice, enables the creation, updating, and listing of tickets. Submitted ticket payloads undergo comprehensive validation to ensure data integrity and completeness. Valid tickets are persisted in the database, allowing users to access accurate and up-to-date information. The server offers secure and efficient management of tickets within the microservice architecture, providing a reliable solution for handling ticket-related operations."
  },
  "servers": [
    {
      "url": "http://localhost:46000"
    }
  ],
  "tags": [
    {
      "name": "Ticket",
      "description": "Create, list and update"
    }
  ],
  "paths": {
    "/tickets/{ticketId}": {
      "put": {
        "tags": ["Ticket"],
        "summary": "Update an existing ticket",
        "description": "Update an existing ticket by Id",
        "operationId": "updateTicket",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "ID of ticket to update",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Mongodb ObjectId",
              "example": "507f191e810c19729de860ea",
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "Update the status of an existent ticket on db",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialTicketBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal API errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/tickets": {
      "post": {
        "tags": ["Ticket"],
        "summary": "Add a new ticket into db",
        "description": "Add a new ticket into db",
        "operationId": "createTicket",
        "requestBody": {
          "description": "Create a new ticket into db",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal API errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Ticket"],
        "summary": "Get all available tickets",
        "description": "List the previous created tickets",
        "operationId": "getAllTickets",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal API errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Ticket": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique id for each ticket, generated and managed by db.",
            "example": "00000020f51bb4362eee2a4d"
          },
          "status": {
            "type": "string",
            "enum": ["open", "closed"],
            "description": "Ticket status:\n * `open` - It is still opened to changes\n * `closed` - It is closed for changes\n"
          },
          "client": {
            "type": "string",
            "description": "Client's name that created the ticket",
            "example": "Archivald's Broom"
          },
          "deadline": {
            "type": "string",
            "description": "Ticket lifespan (it represent a date in ISO format)",
            "example": "2023-07-09T08:02:36.022Z"
          },
          "issue": {
            "type": "string",
            "description": "Ticket's description",
            "example": "Some computers suddenly stopped to work"
          }
        },
        "required": ["client", "issue"]
      },
      "CreateTicketBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["open", "closed"],
            "description": "Ticket status:\n * `open` - It is still opened to changes\n * `closed` - It is closed for changes\n"
          },
          "client": {
            "type": "string",
            "description": "Client's name that created the ticket",
            "example": "Archivald's Broom"
          },
          "deadline": {
            "type": "string",
            "description": "Ticket lifespan (it represent a date in ISO format)",
            "example": "2023-07-09T08:02:36.022Z"
          },
          "issue": {
            "type": "string",
            "description": "Ticket's description",
            "example": "Some computers suddenly stopped to work"
          }
        },
        "required": ["client", "issue"]
      },
      "PartialTicketBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["open", "closed"],
            "description": "Ticket status:\n * `open` - It is still opened to changes\n * `closed` - It is closed for changes\n"
          }
        },
        "required": ["status"]
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 500,
            "description": "HTTP status for the Error"
          },
          "error": {
            "type": "string",
            "example": "mode.exec() heached the maximum timeout",
            "description": "Message attached on the error thrown"
          },
          "cause": {
            "type": "object",
            "description": "It holds the cause for that made this error bubble"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "example": 400
              },
              "error": {
                "example": "ticket.deadline must be a valid date"
              }
            }
          }
        ]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "example": 404
              },
              "error": {
                "example": "Ticket not found"
              }
            }
          }
        ]
      }
    }
  }
}
